version: 2.1

orbs:
  docker: circleci/docker@1.7.0
  doctl: digitalocean/cli@0.1.1
  kubernetes: circleci/kubernetes@1.3.0
  slack: circleci/slack@4.1.4
  browser-tools: circleci/browser-tools@1.1.1
  jq: circleci/jq@2.2.0
  kuz: finc/kustomize@0.0.1
  envsbt: sawadashota/envsubst@1.1.0
  aws-cli: circleci/aws-cli@2.1.0
  gcp-cli: circleci/gcp-cli@2.4.1

commands:
  deploy:
    description: "deliver application to kubernetes cluster"
    parameters:
      cloud_provider:
        type: string
      environment:
        type: string
      image:
        type: string
        default: "gathertown/casper-3"
      cluster:
        type: string
        default: abcd
      subdomain:
        type: string
        default: ""
      zone:
        type: string
      region:
        type: string
      level:
        type: string
        default: "info"
      cloudflare_proxied_node_pools:
        type: string
        default: ""
      label_values:
        type: string
        default: "sfu"
    steps:
      - checkout
      - kubernetes/install-kubectl:
          kubectl-version: v1.21.11
      - envsbt/install
      - kuz/install:
          version: "v4.0.1"
      - when:
          condition:
            equal: [<<parameters.cloud_provider>>, "DigitalOcean"]
          steps:
            - doctl/install
            - doctl/initialize
            - run: |
                doctl kubernetes cluster kubeconfig save <<parameters.cluster>>
      - when:
          condition:
            equal: [<<parameters.cloud_provider>>, "AmazonWebServices"]
          steps:
            - run:
                name: set proper AWS region
                command: |
                  echo "export AWS_DEFAULT_REGION=<<parameters.region>>" >> $BASH_ENV
                  echo "export AWS_ACCESS_KEY_ID=${AWS_EKS_DEPLOY_USER}" >> $BASH_ENV
                  echo "export AWS_SECRET_ACCESS_KEY=${AWS_EKS_DEPLOY_KEY}" >> $BASH_ENV
            - aws-cli/setup:
                aws-access-key-id: AWS_EKS_DEPLOY_USER
                aws-secret-access-key: AWS_EKS_DEPLOY_KEY
            - run:
                name: configure kubernetes cluster
                command: |
                  aws eks --region <<parameters.region>> update-kubeconfig --name <<parameters.cluster>>
      - when:
          condition:
            equal: [<<parameters.cloud_provider>>, "GoogleComputePlatform"]
          steps:
            - gcp-cli/install
            - gcp-cli/initialize
            - run:
                name: configure kubernetes cluster
                command: |
                  gcloud container clusters get-credentials <<parameters.cluster>>
      - run:
          name: deploy casper-3 application to kubernetes cluster
          environment:
            - ENV: <<parameters.environment>>
            - PROVIDER: cloudflare
            - SUBDOMAIN: <<parameters.subdomain>>
            - ZONE: <<parameters.zone>>
            - LOGLEVEL: <<parameters.level>>
            - CLOUDFLARE_PROXIED_NODE_POOLS: <<parameters.cloudflare_proxied_node_pools>>
            - LABEL_VALUES: <<parameters.label_values>>
          command: |
            sed -i "s/__KUSTOMIZE_DOCKERHUB_CREDENTIALS__/$(echo -n ${DOCKERHUB_CREDENTIALS} | base64 -w0)/g" deployments/base/docker-registry.yaml
            cd deployments/overlays/cluster
            kustomize edit set image <<parameters.image>>:${CIRCLE_SHA1:0:9}
            envsubst < deployment.yaml > deployment-temp.yaml
            rm -f deployment.yaml
            mv deployment-temp.yaml deployment.yaml
            kustomize build . | kubectl apply -f -
  build-and-push:
    description: "build and push docker image to registry"
    parameters:
      image:
        type: string
        default: "gathertown/casper-3"
      dockerfile:
        type: string
        default: "Dockerfile"
    steps:
      - checkout
      - docker/build:
          dockerfile: <<parameters.dockerfile>>
          image: <<parameters.image>>
          tag: ${CIRCLE_SHA1:0:9}
      - docker/check
      - docker/push:
          image: <<parameters.image>>
          tag: ${CIRCLE_SHA1:0:9}

jobs:
  build-and-push:
    parameters:
      image:
        type: string
        default: "gathertown/casper-3"
      dockerfile:
        type: string
        default: "Dockerfile"
    executor: docker/docker
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - build-and-push:
          dockerfile: <<parameters.dockerfile>>
          image: <<parameters.image>>
  deploy:
    parameters:
      environment:
        type: string
      cloud_provider:
        type: string
        default: "DigitalOcean"
      cluster:
        type: string
      subdomain:
        type: string
        default: ""
      zone:
        type: string
      region:
        type: string
        default: "us-east-1"
      level:
        type: string
      cloudflare_proxied_node_pools:
        type: string
      label_values:
        type: string
    executor: docker/docker
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - deploy:
          environment: <<parameters.environment>>
          cluster: <<parameters.cluster>>
          subdomain: <<parameters.subdomain>>
          zone: <<parameters.zone>>
          level: <<parameters.level>>
          region: <<parameters.region>>
          cloud_provider: <<parameters.cloud_provider>>
          cloudflare_proxied_node_pools: <<parameters.cloudflare_proxied_node_pools>>
          label_values: <<parameters.label_values>>

workflows:
  build-and-push:
    jobs:
      - build-and-push:
          dockerfile: Dockerfile
          filters:
            branches:
              only:
                - develop
                - staging
                - main

      # development cluster
      - deploy:
          name: development
          requires:
            - build-and-push
          environment: development
          cluster: $K8S_DEV_NYC1
          subdomain: dev.k8s
          zone: gather.town
          level: debug
          cloudflare_proxied_node_pools: "sfu"
          label_values: "sfu, engine"
          filters:
            branches:
              only:
                - develop

      # staging clusters
      - deploy: &deploy-staging
          name: staging-do-nyc3-a
          requires:
            - build-and-push
          environment: staging-do-nyc3-a
          cluster: $K8S_STG_NYC3_A
          subdomain: nyc3-a.stg.do
          zone: gather.town
          level: debug
          cloudflare_proxied_node_pools: "sfu"
          label_values: "sfu, engine"
          filters:
            branches:
              only:
                - staging
      - deploy:
          <<: *deploy-staging
          name: staging-do-fra1-a
          environment: staging-do-fra1-a
          cluster: $K8S_STG_FRA1_A
          subdomain: fra1-a.stg.do

      # production clusters
      - deploy: &deploy-production
          name: production-do-blr1-a
          requires:
            - build-and-push
          environment: production-do-blr1-a
          cluster: $K8S_PROD_BLR1_A
          subdomain: blr1-a.prod.do
          zone: gather.town
          level: info
          cloudflare_proxied_node_pools: "sfu"
          label_values: "sfu"
          filters:
            branches:
              only:
                - main
      - deploy:
          <<: *deploy-production
          name: production-do-fra1-a
          environment: production-do-fra1-a
          cluster: $K8S_PROD_FRA1_A
          subdomain: fra1-a.prod.do

      - deploy:
          <<: *deploy-production
          name: production-do-fra1-b
          environment: production-do-fra1-b
          cluster: $K8S_PROD_FRA1_B
          subdomain: fra1-b.prod.do

      - deploy:
          <<: *deploy-production
          name: production-do-sgp1-a
          environment: production-do-sgp1-a
          cluster: $K8S_PROD_SGP1_A
          subdomain: sgp1-a.prod.do

      - deploy:
          <<: *deploy-production
          name: production-do-sgp1-b
          environment: production-do-sgp1-b
          cluster: $K8S_PROD_SGP1_B
          subdomain: sgp1-b.prod.do

      - deploy:
          <<: *deploy-production
          name: production-do-sfo3-a
          environment: production-do-sfo3-a
          cluster: $K8S_PROD_SFO3_A
          subdomain: sfo3-a.prod.do

      - deploy:
          <<: *deploy-production
          name: production-do-sfo3-b
          environment: production-do-sfo3-b
          cluster: $K8S_PROD_SFO3_B
          subdomain: sfo3-b.prod.do

      - deploy:
          <<: *deploy-production
          name: production-do-nyc3-a
          environment: production-do-nyc3-a
          cluster: $K8S_PROD_NYC3_A
          subdomain: nyc3-a.prod.do

      - deploy:
          <<: *deploy-production
          name: production-do-nyc3-b
          environment: production-do-nyc3-b
          cluster: $K8S_PROD_NYC3_B
          subdomain: nyc3-b.prod.do

      - deploy:
          <<: *deploy-production
          name: production-do-nyc3-c
          environment: production-do-nyc3-c
          cluster: $K8S_PROD_NYC3_C
          subdomain: nyc3-c.prod.do
